{"version":3,"sources":["components/CreateEmail/CreateEmail.js","containers/ComposeEmail/ComposeEmail.js"],"names":["withErrorHandler","dispatch","useDispatch","user","useSelector","state","auth","formik","useFormik","initialValues","subject","message","recciverId","validationSchema","Yup","max","required","onSubmit","messageValues","a","createMessage","senderId","userId","resetForm","toast","success","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","Paper","className","elevation","noValidate","autoComplete","handleSubmit","Input","label","id","name","type","error","touched","errors","errorMessage","onChange","handleChange","onBlur","handleBlur","value","values","rows","rowsMax","Button","variant","color","disabled","isValid","ComposeEmail"],"mappings":"qSA4GeA,eAjGK,WAClB,IAAMC,EAAWC,cACTC,EAASC,aAAY,SAACC,GAAD,OAAWA,EAAMC,QAAtCH,KACFI,EAASC,YAAU,CACvBC,cAAe,CACbC,QAAS,GACTC,QAAS,GACTC,WAAY,IAEdC,iBAAkBC,IAAW,CAC3BJ,QAASI,MACNC,IAAI,GAAI,iCACRC,SAAS,YACZL,QAASG,MAAaE,SAAS,YAC/BJ,WAAYE,MAAaE,SAAS,cAEpCC,SAAS,WAAD,4BAAE,WAAOC,GAAP,SAAAC,EAAA,sEACFlB,EACJmB,YAAc,2BAAKF,GAAN,IAAqBG,SAAUlB,EAAKmB,WAF3C,OAIRf,EAAOgB,YACPC,IAAMC,QAAQ,sBAAuB,CACnCC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAXJ,2CAAF,mDAAC,KAeX,OACE,cAACC,EAAA,EAAD,CAAOC,UAAU,eAAeC,UAAW,EAA3C,SACE,uBACED,UAAU,qBACVE,YAAU,EACVC,aAAa,MACbpB,SAAUV,EAAO+B,aAJnB,UAKE,cAACC,EAAA,EAAD,CACEL,UAAU,sBACVM,MAAM,UACNC,GAAG,UACHC,KAAK,UACLC,KAAK,OACLC,MAAOrC,EAAOsC,QAAQnC,SAAWH,EAAOuC,OAAOpC,QAC/CqC,aAAcxC,EAAOuC,OAAOpC,QAC5BsC,SAAUzC,EAAO0C,aACjBC,OAAQ3C,EAAO4C,WACfC,MAAO7C,EAAO8C,OAAO3C,UAEvB,cAAC6B,EAAA,EAAD,CACEL,UAAU,sBACVM,MAAM,UACNC,GAAG,UACHC,KAAK,UACLC,KAAK,OACLC,MAAOrC,EAAOsC,QAAQlC,SAAWJ,EAAOuC,OAAOnC,QAC/CoC,aAAcxC,EAAOuC,OAAOnC,QAC5BqC,SAAUzC,EAAO0C,aACjBC,OAAQ3C,EAAO4C,WACfC,MAAO7C,EAAO8C,OAAO1C,QACrB2C,KAAM,EACNC,QAAS,IAEX,cAAChB,EAAA,EAAD,CACEL,UAAU,sBACVM,MAAM,YACNC,GAAG,WACHC,KAAK,WACLC,KAAK,OACLS,MAAOjD,EAAKmB,SAEd,cAACiB,EAAA,EAAD,CACEL,UAAU,sBACVM,MAAM,cACNC,GAAG,aACHC,KAAK,aACLC,KAAK,OACLC,MAAOrC,EAAOsC,QAAQjC,YAAcL,EAAOuC,OAAOlC,WAClDmC,aAAcxC,EAAOuC,OAAOlC,WAC5BoC,SAAUzC,EAAO0C,aACjBC,OAAQ3C,EAAO4C,WACfC,MAAO7C,EAAO8C,OAAOzC,aAEvB,cAAC4C,EAAA,EAAD,CACEtB,UAAU,oBACVS,KAAK,SACLc,QAAQ,YACRC,MAAM,UACNC,UAAWpD,EAAOqD,QALpB,0BCnFOC,UARM,WACnB,OACE,qBAAK3B,UAAU,gBAAf,SACE,cAAC,EAAD","file":"static/js/5.f8b37ee0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './CreateEmail.scss';\r\nimport { Button, Paper } from '@material-ui/core';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createMessage } from '../../store/actions/message';\r\nimport { Input } from '../../UI/Input';\r\nimport withErrorHandler from '../../withErrorHandler/withErrorHandler';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst CreateEmail = () => {\r\n  const dispatch = useDispatch();\r\n  const { user } = useSelector((state) => state.auth);\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      subject: '',\r\n      message: '',\r\n      recciverId: '',\r\n    },\r\n    validationSchema: Yup.object({\r\n      subject: Yup.string()\r\n        .max(30, 'Must be 30 characters or less')\r\n        .required('Required'),\r\n      message: Yup.string().required('Required'),\r\n      recciverId: Yup.string().required('Required'),\r\n    }),\r\n    onSubmit: async (messageValues) => {\r\n      await dispatch(\r\n        createMessage({ ...messageValues, senderId: user.userId })\r\n      );\r\n      formik.resetForm();\r\n      toast.success('Message was created', {\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    },\r\n  });\r\n  return (\r\n    <Paper className='create-email' elevation={5}>\r\n      <form\r\n        className='create-email__form'\r\n        noValidate\r\n        autoComplete='off'\r\n        onSubmit={formik.handleSubmit}>\r\n        <Input\r\n          className='create-email__input'\r\n          label='Subject'\r\n          id='subject'\r\n          name='subject'\r\n          type='text'\r\n          error={formik.touched.subject && formik.errors.subject}\r\n          errorMessage={formik.errors.subject}\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.subject}\r\n        />\r\n        <Input\r\n          className='create-email__input'\r\n          label='Message'\r\n          id='message'\r\n          name='message'\r\n          type='text'\r\n          error={formik.touched.message && formik.errors.message}\r\n          errorMessage={formik.errors.message}\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.message}\r\n          rows={4}\r\n          rowsMax={8}\r\n        />\r\n        <Input\r\n          className='create-email__input'\r\n          label='Sender Id'\r\n          id='senderId'\r\n          name='senderId'\r\n          type='text'\r\n          value={user.userId}\r\n        />\r\n        <Input\r\n          className='create-email__input'\r\n          label='Recciver Id'\r\n          id='recciverId'\r\n          name='recciverId'\r\n          type='text'\r\n          error={formik.touched.recciverId && formik.errors.recciverId}\r\n          errorMessage={formik.errors.recciverId}\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.recciverId}\r\n        />\r\n        <Button\r\n          className='create-email__cta'\r\n          type='submit'\r\n          variant='contained'\r\n          color='primary'\r\n          disabled={!formik.isValid}>\r\n          Send\r\n        </Button>\r\n      </form>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default withErrorHandler(CreateEmail);\r\n","import React from 'react';\r\nimport './ComposeEmail.scss';\r\nimport CreateEmail from '../../components/CreateEmail/CreateEmail';\r\n\r\nconst ComposeEmail = () => {\r\n  return (\r\n    <div className='compose-email'>\r\n      <CreateEmail />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComposeEmail;\r\n"],"sourceRoot":""}